name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      attestations: write
    strategy:
      matrix:
        include:
          - target: x86_64-linux-musl
          - target: aarch64-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build binary
        env:
          CC: zig cc -target ${{ matrix.target }}
        run: |
          bash build.sh
          gzip -1 -c make > make-${{ matrix.target }}.gz

      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: make-${{ matrix.target }}.gz
          path: make-${{ matrix.target }}.gz

      - uses: actions/attest-build-provenance@v2
        with:
          subject-name: make-${{ matrix.target }}.gz
          subject-digest: sha256:${{ steps.upload_artifact.outputs.artifact-digest }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in make-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/* release-assets/
            fi
          done
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Determine release type and tag
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "is_tag_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_tag_release=false" >> $GITHUB_OUTPUT
            echo "tag_name=nightly" >> $GITHUB_OUTPUT
            echo "release_name=Nightly $(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing nightly release
        if: steps.release_info.outputs.is_tag_release == 'false'
        run: |
          gh release delete nightly --yes || true
          git push origin :refs/tags/nightly || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          prerelease: ${{ steps.release_info.outputs.prerelease }}
          files: |
            release-assets/*
          body: |
            ${{ steps.release_info.outputs.is_tag_release == 'true' && 'Release' || 'Nightly build from main branch' }}

            ## Installation

            Download the appropriate binary for your platform, gunzip and make it executable.
